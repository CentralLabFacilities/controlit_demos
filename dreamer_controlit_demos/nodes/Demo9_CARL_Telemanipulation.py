#!/usr/bin/env python

'''
Enables users to telemanipulate Dreamer's end effectors via CARL.
Uses WBOSC configured with due end-effector 5DOF control.

-----------------
Dependency notes:

If you're using Python 2.7, you need to install Python's enum package.

Download it from here: https://pypi.python.org/pypi/enum34#downloads

Then run:
  $ sudo python setup.py install

Visualzing the FSM requires smach_viewer:
  $ sudo apt-get install ros-indigo-smach-viewer

You will need to modify /opt/ros/indigo/lib/python2.7/dist-packages/xdot/xdot.py
lines 487, 488, 593, and 594 to contain self.read_float() instead of self.read_number().

-----------------
Usage Notes:

To issue a command using the command line:

  exit:
    $ rostopic pub --once /demo9/cmd std_msgs/Int32 'data: 0'

  go to ready:
    $ rostopic pub --once /demo9/cmd std_msgs/Int32 'data: 1'

  go to idle:
    $ rostopic pub --once /demo9/cmd std_msgs/Int32 'data: 2'

  shake hands:
    $ rostopic pub --once /demo9/cmd std_msgs/Int32 'data: 6'

  wave:
    $ rostopic pub --once /demo9/cmd std_msgs/Int32 'data: 7'


To visualize FSM:
  $ rosrun smach_viewer smach_viewer.py
'''

import sys, getopt     # for getting and parsing command line arguments
import time
import math
import threading
import rospy
import smach
import smach_ros

from enum import IntEnum

from std_msgs.msg import Float64, Float64MultiArray, MultiArrayDimension, Bool, Int32

import numpy as np
from scipy.interpolate import interp1d
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

print(sys.path)


import DreamerInterface
import Trajectory
import TrajectoryGeneratorCubicSpline

# import roslib; roslib.load_manifest('controlit_dreamer_integration')

import controlit_trajectory_generators  # This adds the directory containing TrapezoidVelocityTrajGen to the PYTHONPATH
import TrapezoidVelocityTrajGen

# The previous demos that we would like to execute
import Demo4_HandWave
import Demo5_HandShake
import Demo7_HookemHorns

ENABLE_USER_PROMPTS = False

# Shoulder abductors about 10 degrees away from body and elbows bent 90 degrees
# DEFAULT_POSTURE = [0.0, 0.0,                                    # torso
#                    0.0, 0.174532925, 0.0, 1.57, 0.0, 0.0, 0.0,  # left arm
#                    0.0, 0.174532925, 0.0, 1.57, 0.0, 0.0, 0.0]  # right arm

# Shoulder abductors and elbows at about 10 degrees
DEFAULT_POSTURE = [0.0, 0.0,                                    # torso
                   0.0, 0.174532925, 0.0, 0.174532925, 0.0, 0.0, 0.0,  # left arm
                   0.0, 0.174532925, 0.0, 0.174532925, 0.0, 0.0, 0.0]  # right arm

DEFAULT_READY_RH_CARTPOS = [0.25822435038901964, -0.1895604971725577, 1.0461857180093073]
DEFAULT_READY_RH_ORIENT = [0.5409881394605172, -0.8191390472602035, 0.19063854336595773]
DEFAULT_READY_LH_CARTPOS = [0.25822435038901964, 0.25, 1.0461857180093073]
DEFAULT_READY_LH_ORIENT = [0.5409881394605172, 0.8191390472602035, 0.19063854336595773]
DEFAULT_READY_POSTURE = [0.06796522908004803, 0.06796522908004803,                                            # torso
    -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
    -0.08569654146540764, 0.07021124925432169, -0.15649686418494702, 1.7194162945362514, 1.51, -0.07, -0.18]  # right arm


# Define the commands that can be received from the CARL user interface.
# These should match the commands defined in:
#
#     carl/carl_ws/src/carl_server/src/client/public/js/client.js
#
# See: https://bitbucket.org/cfok/carl
#
class Command:
    CMD_GOTO_IDLE = 0
    CMD_GOTO_READY = 1

    CMD_BEHAVIOR_SHAKE = 6
    CMD_BEHAVIOR_WAVE = 7
    CMD_BEHAVIOR_HOOKEM = 8
    CMD_BEHAVIOR_MORE = 9

    CMD_LEFT_GRIPPER = 1
    CMD_RIGHT_HAND = 2

    CMD_OPEN = 0
    CMD_CLOSE = 1

    CMD_TRANSLATE = 1
    CMD_ROTATE = 2

    CMD_MOVE_LEFT = 2
    CMD_MOVE_RIGHT = 3
    CMD_MOVE_UP = 4
    CMD_MOVE_DOWN = 5
    CMD_MOVE_FORWARD = 6
    CMD_MOVE_BACKWARD = 7

# Define the Cartesian directions. This is used by the MoveCartesianState.
class CartesianDirection(IntEnum):
    UP = 0
    DOWN = 1
    LEFT = 2
    RIGHT = 3
    FORWARD = 4
    BACKWARD = 5

#==================================================================================
# The following parameters are used by the trapezoid velocity trajectory generator

# The time each trajectory should take
TIME_GO_TO_READY = 5.0
TIME_GO_TO_IDLE = 7.0

GO_BACK_TO_READY_SPEED = 0.01 # 1 cm/s

# The speed at which the Cartesian position should change
TRAVEL_SPEED = 0.02  # 2 cm per second
ACCELERATION = 0.06  # 1 cm/s^2
DECELERATION = 0.06  # 1 cm/s^2

# The update frequency when adjusting the Cartesian position
TRAJECTORY_UPDATE_FREQUENCY = 100

X_AXIS = 0
Y_AXIS = 1
Z_AXIS = 2

# Define the Cartesian movement increment
CARTESIAN_MOVE_DELTA = 0.01  # 1 cm movement increments


class TrajectoryState(smach.State):
    """
    A SMACH state that makes the robot follow a trajectory.
    """

    def __init__(self, dreamerInterface, traj):
        """
        The constructor.

        Keyword Parameters:
          - dreamerInterface: The object to which to provide the trajectory.
          - traj: The trajectory to follow.
        """

        smach.State.__init__(self, outcomes=["done", "exit"])
        self.dreamerInterface = dreamerInterface
        self.traj = traj

    def execute(self, userdata):
        rospy.loginfo('Executing TrajectoryState')

        if self.dreamerInterface.followTrajectory(self.traj):
            return "done"
        else:
            return "exit"

class TrajectoryShakeHands(smach.State):
    """
    A SMACH state that makes the robot shake hands.
    """

    def __init__(self, dreamerInterface, prevTraj):
        """
        The constructor.

        Keyword Parameters:
          - dreamerInterface: The robot interface object. The trajectory is provided to this object.
          - prevTraj: The previous trajectory. Used to ensure smooth transition into this trajectory
        """

        smach.State.__init__(self, outcomes=["done", "exit"])
        self.dreamerInterface = dreamerInterface

        TIME_EXTEND = 2.0
        TIME_SHAKE = 5.0

        # ==============================================================================================
        # Define the HandShake trajectory
        self.trajExtend = Trajectory.Trajectory("Extend", TIME_EXTEND)
        self.trajExtend.setPrevTraj(prevTraj)

        self.trajExtend.addRHCartWP([0.3104136932597554, -0.23958048524931236, 1.0288961306030007])
        self.trajExtend.addRHCartWP([0.3091653465539496, -0.26014726583647924, 1.0356396464404043])
        self.trajExtend.addRHCartWP([0.30972113171989446, -0.3134234808726032, 1.0461728164960131])
        self.trajExtend.addRHCartWP([0.3046856805137895, -0.3398003519073846, 1.0510229674144407])
        self.trajExtend.addRHCartWP([0.3173024098532336, -0.34219626411209203, 1.0644529426815315])

        self.trajExtend.addRHOrientWP([0.5004519685854716, -0.8593135617342791, 0.10548947700350815])
        self.trajExtend.addRHOrientWP([0.5004519685854716, -0.8593135617342791, 0.10548947700350815])
        self.trajExtend.addRHOrientWP([0.5004519685854716, -0.8593135617342791, 0.10548947700350815])
        self.trajExtend.addRHOrientWP([0.5004519685854716, -0.8593135617342791, 0.10548947700350815])
        self.trajExtend.addRHOrientWP([0.5004519685854716, -0.8593135617342791, 0.10548947700350815])

        self.trajExtend.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajExtend.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajExtend.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajExtend.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajExtend.addLHCartWP(DEFAULT_READY_LH_CARTPOS)

        self.trajExtend.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajExtend.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajExtend.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajExtend.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajExtend.addLHOrientWP(DEFAULT_READY_LH_ORIENT)

        self.trajExtend.addPostureWP([0.028444513491162594, 0.028444513491162594,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.11219453452059695, 0.16546402971632587, -0.11395882910199566, 1.3763986059723414, 1.6190270985068778, -0.37718957675753256, -0.19311388740064422])
        self.trajExtend.addPostureWP([0.027789879631802322, 0.027789879631802322,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.09982449826834842, 0.14084614270850673, -0.0058361512535315884, 1.4018309516255258, 1.556134219337181, -0.34496454788689784, -0.0927880951612021])
        self.trajExtend.addPostureWP([0.027935113357263137, 0.027935113357263137,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.13328856860260982, 0.07890268167854148, 0.2603418600235295, 1.400536877824891, 1.5541783835179697, -0.3488103334889514, -0.07865545836463488])
        self.trajExtend.addPostureWP([0.028047416195966585, 0.028047416195966585,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.14405158269023477, 0.08330404179761804, 0.35485388080251956, 1.3998793638319809, 1.5468160099625425, -0.3217818596171365, -0.08263738134922839])
        self.trajExtend.addPostureWP([0.028212084482967685, 0.028212084482967685,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.19493960990942347, 0.07496994081163051, 0.3741360648243361, 1.398699928093654, 1.4974573555944546, -0.31669671800133464, -0.08953743861272202])

        self.trajShake = Trajectory.Trajectory("Shake", TIME_SHAKE)
        self.trajShake.setPrevTraj(self.trajExtend)

        self.trajShake.addRHCartWP([0.31071689277058917, -0.3422655576028866, 1.0548678951005588])
        self.trajShake.addRHCartWP([0.32266611868312994, -0.34026301768744155, 1.0861769204139096])
        self.trajShake.addRHCartWP([0.3231493426756944, -0.3390478820635321, 1.1081103121891949])
        self.trajShake.addRHCartWP([0.32513302810765704, -0.3344754858243065, 1.0673023989448422])
        self.trajShake.addRHCartWP([0.31903382422753407, -0.332566106394895, 1.0298997494550077])
        self.trajShake.addRHCartWP([0.30422147281718565, -0.3296577294337501, 0.9925362962729714])
        self.trajShake.addRHCartWP([0.29349153147057855, -0.3256993083767356, 0.9738006291466748])
        self.trajShake.addRHCartWP([0.32224426461480954, -0.3310542688610496, 1.0318421917898017])
        self.trajShake.addRHCartWP([0.32810140838167967, -0.3326205381514441, 1.0563530115045692])
        self.trajShake.addRHCartWP([0.3281756475492571, -0.33051419331773485, 1.0674362367695813])
        self.trajShake.addRHCartWP([0.3173024098532336, -0.34219626411209203, 1.0644529426815315])

        self.trajShake.addRHOrientWP([-0.05732874991178004, -0.9953331349468206, 0.07762322404079096])
        self.trajShake.addRHOrientWP([-0.05732874991178004, -0.9953331349468206, 0.07762322404079096])
        self.trajShake.addRHOrientWP([-0.05732874991178004, -0.9953331349468206, 0.07762322404079096])
        self.trajShake.addRHOrientWP([-0.05732874991178004, -0.9953331349468206, 0.07762322404079096])
        self.trajShake.addRHOrientWP([-0.05732874991178004, -0.9953331349468206, 0.07762322404079096])
        self.trajShake.addRHOrientWP([-0.05732874991178004, -0.9953331349468206, 0.07762322404079096])
        self.trajShake.addRHOrientWP([-0.05732874991178004, -0.9953331349468206, 0.07762322404079096])
        self.trajShake.addRHOrientWP([-0.05732874991178004, -0.9953331349468206, 0.07762322404079096])
        self.trajShake.addRHOrientWP([-0.05732874991178004, -0.9953331349468206, 0.07762322404079096])
        self.trajShake.addRHOrientWP([-0.05732874991178004, -0.9953331349468206, 0.07762322404079096])
        self.trajShake.addRHOrientWP([0.5004519685854716, -0.8593135617342791, 0.10548947700350815])

        self.trajShake.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajShake.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajShake.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajShake.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajShake.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajShake.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajShake.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajShake.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajShake.addLHCartWP(DEFAULT_READY_LH_CARTPOS)

        self.trajShake.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajShake.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajShake.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajShake.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajShake.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajShake.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajShake.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajShake.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajShake.addLHOrientWP(DEFAULT_READY_LH_ORIENT)

        self.trajShake.addPostureWP([0.028108547792328124, 0.028108547792328124,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.17228978956798197, 0.07434885404064914, 0.375333638022727, 1.3888092319639083, 1.5079201767999826, -0.31641347528653985, -0.1015319969687243])
        self.trajShake.addPostureWP([0.02807599142615882, 0.02807599142615882,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.21459152416842134, 0.07263057405113098, 0.37081140433698745, 1.4567639364718938, 1.5089499315784638, -0.3175519769988421, -0.09818059072886748])
        self.trajShake.addPostureWP([0.02804606887225163, 0.02804606887225163,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.22334628339985577, 0.07243726113745749, 0.36951308061996, 1.5267467563477293, 1.5118402015343135, -0.317372505037564, -0.09714620016070197])
        self.trajShake.addPostureWP([0.028378035288426473, 0.028378035288426473,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.2230578085565455, 0.04639868920316817, 0.37944787856090473, 1.3943789342038184, 1.5090758333232006, -0.31659570132874054, -0.09672596370783676])
        self.trajShake.addPostureWP([0.028413501795785365, 0.028413501795785365,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.20810354502069642, 0.04637090733175224, 0.3773909915962375, 1.2753670180837835, 1.491115101584284, -0.3139068866754734, -0.10009597100447003])
        self.trajShake.addPostureWP([0.02852194867687742, 0.02852194867687742,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.17942085807353006, 0.0458858888438078, 0.3761147209696891, 1.1696550882674261, 1.4878651941128596, -0.3136020058406554, -0.09769358534069474])
        self.trajShake.addPostureWP([0.028437878552613094, 0.028437878552613094,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.1585783300454735, 0.040323674861854536, 0.3743689535705127, 1.1239572239760118, 1.4880696754409228, -0.31544202969105134, -0.09728755843221447])
        self.trajShake.addPostureWP([0.027972524735509117, 0.027972524735509117,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.21766110353149037, 0.04462270263066805, 0.37394659601800545, 1.272177850314399, 1.4867124148544228, -0.3018197603232544, -0.11123418524790345])
        self.trajShake.addPostureWP([0.027902050140807648, 0.027902050140807648,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.23246574644808587, 0.04535144367015018, 0.37470091392591226, 1.3438226521225294, 1.4895806533796303, -0.3037351903496162, -0.10710217274190663])
        self.trajShake.addPostureWP([0.028037409299435538, 0.028037409299435538,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.2300209266385682, 0.04269931702175429, 0.36885256667640404, 1.3881511959199457, 1.4898744925776721, -0.3105485868832839, -0.10095552101380002])
        self.trajShake.addPostureWP([0.028212084482967685, 0.028212084482967685,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.19493960990942347, 0.07496994081163051, 0.3741360648243361, 1.398699928093654, 1.4974573555944546, -0.31669671800133464, -0.08953743861272202])


        self.trajRetract = Trajectory.Trajectory("Retract", TIME_EXTEND)
        self.trajRetract.setPrevTraj(self.trajShake)

        self.trajRetract.addRHCartWP([0.3173024098532336, -0.34219626411209203, 1.0644529426815315])
        self.trajRetract.addRHCartWP([0.3046856805137895, -0.3398003519073846, 1.0510229674144407])
        self.trajRetract.addRHCartWP([0.30972113171989446, -0.3134234808726032, 1.0461728164960131])
        self.trajRetract.addRHCartWP([0.3091653465539496, -0.26014726583647924, 1.0356396464404043])
        self.trajRetract.addRHCartWP([0.3104136932597554, -0.23958048524931236, 1.0288961306030007])
        self.trajRetract.addRHCartWP(DEFAULT_READY_RH_CARTPOS)

        self.trajRetract.addRHOrientWP([0.5004519685854716, -0.8593135617342791, 0.10548947700350815])
        self.trajRetract.addRHOrientWP([0.5004519685854716, -0.8593135617342791, 0.10548947700350815])
        self.trajRetract.addRHOrientWP([0.5004519685854716, -0.8593135617342791, 0.10548947700350815])
        self.trajRetract.addRHOrientWP([0.5004519685854716, -0.8593135617342791, 0.10548947700350815])
        self.trajRetract.addRHOrientWP([0.5004519685854716, -0.8593135617342791, 0.10548947700350815])
        self.trajRetract.addRHOrientWP(DEFAULT_READY_RH_ORIENT)

        self.trajRetract.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajRetract.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajRetract.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajRetract.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajRetract.addLHCartWP(DEFAULT_READY_LH_CARTPOS)

        self.trajRetract.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajRetract.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajRetract.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajRetract.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajRetract.addLHOrientWP(DEFAULT_READY_LH_ORIENT)

        self.trajRetract.addPostureWP([0.028212084482967685, 0.028212084482967685,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.19493960990942347, 0.07496994081163051, 0.3741360648243361, 1.398699928093654, 1.4974573555944546, -0.31669671800133464, -0.08953743861272202])
        self.trajRetract.addPostureWP([0.028047416195966585, 0.028047416195966585,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.14405158269023477, 0.08330404179761804, 0.35485388080251956, 1.3998793638319809, 1.5468160099625425, -0.3217818596171365, -0.08263738134922839])
        self.trajRetract.addPostureWP([0.027935113357263137, 0.027935113357263137,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.13328856860260982, 0.07890268167854148, 0.2603418600235295, 1.400536877824891, 1.5541783835179697, -0.3488103334889514, -0.07865545836463488])
        self.trajRetract.addPostureWP([0.027789879631802322, 0.027789879631802322,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.09982449826834842, 0.14084614270850673, -0.0058361512535315884, 1.4018309516255258, 1.556134219337181, -0.34496454788689784, -0.0927880951612021])
        self.trajRetract.addPostureWP([0.028444513491162594, 0.028444513491162594,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.11219453452059695, 0.16546402971632587, -0.11395882910199566, 1.3763986059723414, 1.6190270985068778, -0.37718957675753256, -0.19311388740064422])
        self.trajRetract.addPostureWP(DEFAULT_READY_POSTURE)

    def execute(self, userdata):
        rospy.loginfo('Executing TrajectoryShakeHands')

        if self.dreamerInterface.followTrajectory(self.trajExtend):
            rospy.sleep(2.0) # pause 2 seconds
            if self.dreamerInterface.followTrajectory(self.trajShake):
                 rospy.sleep(2.0) # pause 2 seconds
                 if self.dreamerInterface.followTrajectory(self.trajRetract):
                     return "done"
                 else:
                    return "exit"
            else:
                return "exit"
        else:
            return "exit"

class TrajectoryWave(smach.State):
    """
    A SMACH state that makes the robot wave.
    """

    def __init__(self, dreamerInterface, prevTraj):
        """
        The constructor.

        Keyword Parameters:
          - dreamerInterface: The robot interface object. The trajectory is provided to this object.
          - prevTraj: The previous trajectory. Used to ensure smooth transition into this trajectory
        """

        smach.State.__init__(self, outcomes=["done", "exit"])
        self.dreamerInterface = dreamerInterface

        TIME_REACH = 5.0
        TIME_WAVE = 5.0

        # ==============================================================================================
        # Define the HandShake trajectory
        self.trajReach = Trajectory.Trajectory("Reach", TIME_REACH)
        self.trajReach.setPrevTraj(prevTraj)

        self.trajReach.addRHCartWP([0.2891421588177896, -0.26643796350835947, 1.0651665729621194])
        self.trajReach.addRHCartWP([0.2738215609914654, -0.3099833639235885, 1.0867811005493655])
        self.trajReach.addRHCartWP([0.26147127005939097, -0.36023597738198576, 1.144090716887579])
        self.trajReach.addRHCartWP([0.23731037836772792, -0.3803619643484967, 1.2157365026431992])
        self.trajReach.addRHCartWP([0.22562504266355074, -0.3645786428246571, 1.2454106193199568])
        self.trajReach.addRHCartWP([0.26083529300287084, -0.3225461159405969, 1.1990684013677886])

        self.trajReach.addRHOrientWP([0.11288711039649339, -0.9005468842150748, -0.419847364689658])
        self.trajReach.addRHOrientWP([0.11288711039649339, -0.9005468842150748, -0.419847364689658])
        self.trajReach.addRHOrientWP([0.11288711039649339, -0.9005468842150748, -0.419847364689658])
        self.trajReach.addRHOrientWP([0.11288711039649339, -0.9005468842150748, -0.419847364689658])
        self.trajReach.addRHOrientWP([0.11288711039649339, -0.9005468842150748, -0.419847364689658])
        self.trajReach.addRHOrientWP([0.11288711039649339, -0.9005468842150748, -0.419847364689658])
        self.trajReach.addRHOrientWP([-0.9326862807212133, -0.09488498326021569, 0.3479843986533571])

        self.trajReach.addLHCartWP([0.2891421588177896, 0.26643796350835947, 1.0651665729621194])
        self.trajReach.addLHCartWP([0.2738215609914654, 0.3099833639235885, 1.0867811005493655])
        self.trajReach.addLHCartWP([0.26147127005939097, 0.36023597738198576, 1.144090716887579])
        self.trajReach.addLHCartWP([0.23731037836772792, 0.3803619643484967, 1.2157365026431992])
        self.trajReach.addLHCartWP([0.22562504266355074, 0.3645786428246571, 1.2454106193199568])
        self.trajReach.addLHCartWP([0.26083529300287084, 0.3225461159405969, 1.1990684013677886])

        self.trajReach.addLHOrientWP([0.11288711039649339, 0.9005468842150748, -0.419847364689658])
        self.trajReach.addLHOrientWP([0.11288711039649339, 0.9005468842150748, -0.419847364689658])
        self.trajReach.addLHOrientWP([0.11288711039649339, 0.9005468842150748, -0.419847364689658])
        self.trajReach.addLHOrientWP([0.11288711039649339, 0.9005468842150748, -0.419847364689658])
        self.trajReach.addLHOrientWP([0.11288711039649339, 0.9005468842150748, -0.419847364689658])
        self.trajReach.addLHOrientWP([0.11288711039649339, 0.9005468842150748, -0.419847364689658])
        self.trajReach.addLHOrientWP([-0.9326862807212133, 0.09488498326021569, 0.3479843986533571])

        self.trajReach.addPostureWP([0.0, 0.0,
            0.02425818700712994, 0.27617276194899115, 0.23667195307270084, 1.9363257802761453, 0.5805478004201162, 0.7378654876090591, -0.2564076852399073,
            0.02425818700712994, 0.27617276194899115, 0.23667195307270084, 1.9363257802761453, 0.5805478004201162, 0.7378654876090591, -0.2564076852399073])
        self.trajReach.addPostureWP([0.0, 0.0,
            0.025483026849896832, 0.1475186881049671, 0.026615192266783237, 1.5216003150672675, 1.6313912511127995, -0.34958624344002537, 0.006432336462027455,
            0.025483026849896832, 0.1475186881049671, 0.026615192266783237, 1.5216003150672675, 1.6313912511127995, -0.34958624344002537, 0.006432336462027455])
        self.trajReach.addPostureWP([0.0, 0.0,
            -0.018844493923766886, 0.1844619931838126, 0.16269321484953103, 1.6089357577938808, 1.5285175733555043, -0.27323138889417764, 0.0008555390247900995,
            -0.018844493923766886, 0.1844619931838126, 0.16269321484953103, 1.6089357577938808, 1.5285175733555043, -0.27323138889417764, 0.0008555390247900995])
        self.trajReach.addPostureWP([0.0, 0.0,
            0.0011066581180361442, 0.22136788598787388, 0.3528507187191103, 1.742599171469687, 1.1495679079397818, -0.06334454071883927, -0.21813370844052635,
            0.0011066581180361442, 0.22136788598787388, 0.3528507187191103, 1.742599171469687, 1.1495679079397818, -0.06334454071883927, -0.21813370844052635])
        self.trajReach.addPostureWP([0.0, 0.0,
            0.02576793396122274, 0.2685583467523651, 0.4807464443697569, 1.9387902263562324, 0.9619878908693814, 0.0919768252608017, -0.35118912941457914,
            0.02576793396122274, 0.2685583467523651, 0.4807464443697569, 1.9387902263562324, 0.9619878908693814, 0.0919768252608017, -0.35118912941457914])
        self.trajReach.addPostureWP([0.0, 0.0,
            0.03594014942554539, 0.26794231175811567, 0.47532643882582676, 2.061753635723662, 0.8390183757417925, 0.261293244953731, -0.46691166616932334,
            0.03594014942554539, 0.26794231175811567, 0.47532643882582676, 2.061753635723662, 0.8390183757417925, 0.261293244953731, -0.46691166616932334])
        self.trajReach.addPostureWP([0.0, 0.0,
            0.023120508924397067, 0.2770302973336612, 0.2303289084857716, 1.9332380612417028, 0.5721873864957632, 0.7636907604470692, -0.2658836229797286,
            0.023120508924397067, 0.2770302973336612, 0.2303289084857716, 1.9332380612417028, 0.5721873864957632, 0.7636907604470692, -0.2658836229797286])

        self.trajWave = Trajectory.Trajectory("Wave", TIME_WAVE)
        self.trajWave.setPrevTraj(self.trajReach)


        self.trajWave.addRHCartWP([0.26028623829887, -0.3237020683892924, 1.2004259013766772])
        self.trajWave.addRHCartWP([0.2678248443730223, -0.28120592939187344, 1.179145124692418])
        self.trajWave.addRHCartWP([0.2649660539994561, -0.24091468404721952, 1.1678745696923791])
        self.trajWave.addRHCartWP([0.26854366644410255, -0.2753083323301489, 1.1813964352328732])
        self.trajWave.addRHCartWP([0.2711757872605034, -0.3105491819293972, 1.1766722447955897])
        self.trajWave.addRHCartWP([0.26888647577907276, -0.34551629706807957, 1.1631014076956667])
        self.trajWave.addRHCartWP([0.26220289566616717, -0.3766505746644469, 1.1438654858953055])
        self.trajWave.addRHCartWP([0.2680712787548666, -0.3517481106225686, 1.180202919897088])
        self.trajWave.addRHCartWP([0.27189963870897244, -0.3224861054292379, 1.1847749746804215])
        self.trajWave.addRHCartWP(self.trajReach.getFinalRHCartPos())

        self.trajWave.addRHOrientWP([-0.9326862807212133, -0.09488498326021569, 0.3479843986533571])
        self.trajWave.addRHOrientWP([-0.9326862807212133, -0.09488498326021569, 0.3479843986533571])
        self.trajWave.addRHOrientWP([-0.9326862807212133, -0.09488498326021569, 0.3479843986533571])
        self.trajWave.addRHOrientWP([-0.9326862807212133, -0.09488498326021569, 0.3479843986533571])
        self.trajWave.addRHOrientWP([-0.9326862807212133, -0.09488498326021569, 0.3479843986533571])
        self.trajWave.addRHOrientWP([-0.9326862807212133, -0.09488498326021569, 0.3479843986533571])
        self.trajWave.addRHOrientWP([-0.9326862807212133, -0.09488498326021569, 0.3479843986533571])
        self.trajWave.addRHOrientWP([-0.9326862807212133, -0.09488498326021569, 0.3479843986533571])
        self.trajWave.addRHOrientWP([-0.9326862807212133, -0.09488498326021569, 0.3479843986533571])
        self.trajWave.addRHOrientWP(self.trajReach.getFinalRHOrient())

        self.trajWave.addLHCartWP([0.26028623829887, 0.3237020683892924, 1.2004259013766772])
        self.trajWave.addLHCartWP([0.2678248443730223, 0.28120592939187344, 1.179145124692418])
        self.trajWave.addLHCartWP([0.2649660539994561, 0.24091468404721952, 1.1678745696923791])
        self.trajWave.addLHCartWP([0.26854366644410255, 0.2753083323301489, 1.1813964352328732])
        self.trajWave.addLHCartWP([0.2711757872605034, 0.3105491819293972, 1.1766722447955897])
        self.trajWave.addLHCartWP([0.26888647577907276, 0.34551629706807957, 1.1631014076956667])
        self.trajWave.addLHCartWP([0.26220289566616717, 0.3766505746644469, 1.1438654858953055])
        self.trajWave.addLHCartWP([0.2680712787548666, 0.3517481106225686, 1.180202919897088])
        self.trajWave.addLHCartWP([0.27189963870897244, 0.3224861054292379, 1.1847749746804215])
        self.trajWave.addLHCartWP(self.trajReach.getFinalLHCartPos())

        self.trajWave.addLHOrientWP([-0.9326862807212133, 0.09488498326021569, 0.3479843986533571])
        self.trajWave.addLHOrientWP([-0.9326862807212133, 0.09488498326021569, 0.3479843986533571])
        self.trajWave.addLHOrientWP([-0.9326862807212133, 0.09488498326021569, 0.3479843986533571])
        self.trajWave.addLHOrientWP([-0.9326862807212133, 0.09488498326021569, 0.3479843986533571])
        self.trajWave.addLHOrientWP([-0.9326862807212133, 0.09488498326021569, 0.3479843986533571])
        self.trajWave.addLHOrientWP([-0.9326862807212133, 0.09488498326021569, 0.3479843986533571])
        self.trajWave.addLHOrientWP([-0.9326862807212133, 0.09488498326021569, 0.3479843986533571])
        self.trajWave.addLHOrientWP([-0.9326862807212133, 0.09488498326021569, 0.3479843986533571])
        self.trajWave.addLHOrientWP([-0.9326862807212133, 0.09488498326021569, 0.3479843986533571])
        self.trajWave.addLHOrientWP(self.trajReach.getFinalLHOrient())

        self.trajWave.addPostureWP([0.0, 0.0,
            0.02425818700712994, 0.27617276194899115, 0.23667195307270084, 1.9363257802761453, 0.5805478004201162, 0.7378654876090591, -0.2564076852399073,
            0.02425818700712994, 0.27617276194899115, 0.23667195307270084, 1.9363257802761453, 0.5805478004201162, 0.7378654876090591, -0.2564076852399073])
        self.trajWave.addPostureWP([0.0, 0.0,
            0.007535771521665465, 0.3247352823478412, 0.027795557420007198, 1.909790666927114, 0.4361789097155222, 0.7398997199240379, -0.27338284085108705,
            0.007535771521665465, 0.3247352823478412, 0.027795557420007198, 1.909790666927114, 0.4361789097155222, 0.7398997199240379, -0.27338284085108705])
        self.trajWave.addPostureWP([0.0, 0.0,
            0.011216692253667261, 0.35909722565099345, -0.1547811799592267, 1.9154104596907906, 0.16146991594783283, 0.7525537576665916, -0.2864791792966122,
            0.011216692253667261, 0.35909722565099345, -0.1547811799592267, 1.9154104596907906, 0.16146991594783283, 0.7525537576665916, -0.2864791792966122])
        self.trajWave.addPostureWP([0.0, 0.0,
            0.014403473624907561, 0.3557686841111491, -0.014283577107794349, 1.9147784810930093, 0.35282766522929443, 0.7554295133139658, -0.2783454760401997,
            0.014403473624907561, 0.3557686841111491, -0.014283577107794349, 1.9147784810930093, 0.35282766522929443, 0.7554295133139658, -0.2783454760401997])
        self.trajWave.addPostureWP([0.0, 0.0,
            0.014735582918124976, 0.31882025840072864, 0.1295065694921567, 1.8598482235331046, 0.5185097960744572, 0.7579961945502606, -0.27413721944291364,
            0.014735582918124976, 0.31882025840072864, 0.1295065694921567, 1.8598482235331046, 0.5185097960744572, 0.7579961945502606, -0.27413721944291364])
        self.trajWave.addPostureWP([0.0, 0.0,
            0.014922040816934835, 0.27751265581491197, 0.26787383013193616, 1.7864808921140738, 0.6977819806400224, 0.7451773747394733, -0.2675961794172136,
            0.014922040816934835, 0.27751265581491197, 0.26787383013193616, 1.7864808921140738, 0.6977819806400224, 0.7451773747394733, -0.2675961794172136])
        self.trajWave.addPostureWP([0.0, 0.0,
            0.012833387746088845, 0.24876060191719399, 0.38409139399347575, 1.7037249896781828, 0.7614493947784812, 0.7295284216265229, -0.25112559895704584,
            0.012833387746088845, 0.24876060191719399, 0.38409139399347575, 1.7037249896781828, 0.7614493947784812, 0.7295284216265229, -0.25112559895704584])
        self.trajWave.addPostureWP([0.0, 0.0,
            0.026359767561553636, 0.3143825931838145, 0.2777836608347181, 1.8151427403742135, 0.6227604609492933, 0.7311329212119961, -0.25429899976811055,
            0.026359767561553636, 0.3143825931838145, 0.2777836608347181, 1.8151427403742135, 0.6227604609492933, 0.7311329212119961, -0.25429899976811055])
        self.trajWave.addPostureWP([0.0, 0.0,
            0.02771426440492607, 0.33495035509230187, 0.1650732688389377, 1.8576225950465128, 0.5245571804043544, 0.7354870680095696, -0.2530199407042566,
            0.02771426440492607, 0.33495035509230187, 0.1650732688389377, 1.8576225950465128, 0.5245571804043544, 0.7354870680095696, -0.2530199407042566])
        self.trajWave.addPostureWP(self.trajReach.getFinalPosture())

        self.trajRetract = Trajectory.Trajectory("Retract", TIME_REACH)
        self.trajRetract.setPrevTraj(self.trajReach)

        self.trajRetract.addRHCartWP([0.26083529300287084, -0.3225461159405969, 1.1990684013677886])
        self.trajRetract.addRHCartWP([0.22562504266355074, -0.3645786428246571, 1.2454106193199568])
        self.trajRetract.addRHCartWP([0.23731037836772792, -0.3803619643484967, 1.2157365026431992])
        self.trajRetract.addRHCartWP([0.26147127005939097, -0.36023597738198576, 1.144090716887579])
        self.trajRetract.addRHCartWP([0.2738215609914654, -0.3099833639235885, 1.0867811005493655])
        self.trajRetract.addRHCartWP([0.2891421588177896, -0.26643796350835947, 1.0651665729621194])
        self.trajRetract.addRHCartWP(DEFAULT_READY_RH_CARTPOS)

        self.trajRetract.addRHOrientWP([0.11288711039649339, -0.9005468842150748, -0.419847364689658])
        self.trajRetract.addRHOrientWP([0.11288711039649339, -0.9005468842150748, -0.419847364689658])
        self.trajRetract.addRHOrientWP([0.11288711039649339, -0.9005468842150748, -0.419847364689658])
        self.trajRetract.addRHOrientWP([0.11288711039649339, -0.9005468842150748, -0.419847364689658])
        self.trajRetract.addRHOrientWP([0.11288711039649339, -0.9005468842150748, -0.419847364689658])
        self.trajRetract.addRHOrientWP([0.11288711039649339, -0.9005468842150748, -0.419847364689658])
        self.trajRetract.addRHOrientWP(DEFAULT_READY_RH_ORIENT)

        self.trajRetract.addLHCartWP([0.26083529300287084, 0.3225461159405969, 1.1990684013677886])
        self.trajRetract.addLHCartWP([0.22562504266355074, 0.3645786428246571, 1.2454106193199568])
        self.trajRetract.addLHCartWP([0.23731037836772792, 0.3803619643484967, 1.2157365026431992])
        self.trajRetract.addLHCartWP([0.26147127005939097, 0.36023597738198576, 1.144090716887579])
        self.trajRetract.addLHCartWP([0.2738215609914654, 0.3099833639235885, 1.0867811005493655])
        self.trajRetract.addLHCartWP([0.2891421588177896, 0.26643796350835947, 1.0651665729621194])
        self.trajRetract.addLHCartWP(DEFAULT_READY_LH_CARTPOS)

        self.trajRetract.addLHOrientWP([0.11288711039649339, 0.9005468842150748, -0.419847364689658])
        self.trajRetract.addLHOrientWP([0.11288711039649339, 0.9005468842150748, -0.419847364689658])
        self.trajRetract.addLHOrientWP([0.11288711039649339, 0.9005468842150748, -0.419847364689658])
        self.trajRetract.addLHOrientWP([0.11288711039649339, 0.9005468842150748, -0.419847364689658])
        self.trajRetract.addLHOrientWP([0.11288711039649339, 0.9005468842150748, -0.419847364689658])
        self.trajRetract.addLHOrientWP([0.11288711039649339, 0.9005468842150748, -0.419847364689658])
        self.trajRetract.addLHOrientWP(DEFAULT_READY_LH_ORIENT)

        self.trajRetract.addPostureWP([0.0, 0.0,
            0.023120508924397067, 0.2770302973336612, 0.2303289084857716, 1.9332380612417028, 0.5721873864957632, 0.7636907604470692, -0.2658836229797286,
            0.023120508924397067, 0.2770302973336612, 0.2303289084857716, 1.9332380612417028, 0.5721873864957632, 0.7636907604470692, -0.2658836229797286])
        self.trajRetract.addPostureWP([0.0, 0.0,
            0.03594014942554539, 0.26794231175811567, 0.47532643882582676, 2.061753635723662, 0.8390183757417925, 0.261293244953731, -0.46691166616932334,
            0.03594014942554539, 0.26794231175811567, 0.47532643882582676, 2.061753635723662, 0.8390183757417925, 0.261293244953731, -0.46691166616932334])
        self.trajRetract.addPostureWP([0.0, 0.0,
            0.02576793396122274, 0.2685583467523651, 0.4807464443697569, 1.9387902263562324, 0.9619878908693814, 0.0919768252608017, -0.35118912941457914,
            0.02576793396122274, 0.2685583467523651, 0.4807464443697569, 1.9387902263562324, 0.9619878908693814, 0.0919768252608017, -0.35118912941457914])
        self.trajRetract.addPostureWP([0.0, 0.0,
            0.0011066581180361442, 0.22136788598787388, 0.3528507187191103, 1.742599171469687, 1.1495679079397818, -0.06334454071883927, -0.21813370844052635,
            0.0011066581180361442, 0.22136788598787388, 0.3528507187191103, 1.742599171469687, 1.1495679079397818, -0.06334454071883927, -0.21813370844052635])
        self.trajRetract.addPostureWP([0.0, 0.0,
            -0.018844493923766886, 0.1844619931838126, 0.16269321484953103, 1.6089357577938808, 1.5285175733555043, -0.27323138889417764, 0.0008555390247900995,
            -0.018844493923766886, 0.1844619931838126, 0.16269321484953103, 1.6089357577938808, 1.5285175733555043, -0.27323138889417764, 0.0008555390247900995])
        self.trajRetract.addPostureWP([0.0, 0.0,
            0.025483026849896832, 0.1475186881049671, 0.026615192266783237, 1.5216003150672675, 1.6313912511127995, -0.34958624344002537, 0.006432336462027455,
            0.025483026849896832, 0.1475186881049671, 0.026615192266783237, 1.5216003150672675, 1.6313912511127995, -0.34958624344002537, 0.006432336462027455])
        self.trajRetract.addPostureWP(DEFAULT_READY_POSTURE)

    def execute(self, userdata):
        rospy.loginfo('Executing TrajectoryWave')

        if self.dreamerInterface.followTrajectory(self.trajReach):
            rospy.sleep(2.0) # pause 2 seconds
            if self.dreamerInterface.followTrajectory(self.trajWave):
                 rospy.sleep(2.0) # pause 2 seconds
                 if self.dreamerInterface.followTrajectory(self.trajRetract):
                     return "done"
                 else:
                    return "exit"
            else:
                return "exit"
        else:
            return "exit"

class TrajectoryHookHorns(smach.State):
    """
    A SMACH state that makes the robot execute a hook'em horns gesture.
    """

    def __init__(self, dreamerInterface, prevTraj):
        """
        The constructor.

        Keyword Parameters:
          - dreamerInterface: The robot interface object. The trajectory is provided to this object.
          - prevTraj: The previous trajectory. Used to ensure smooth transition into this trajectory
        """

        smach.State.__init__(self, outcomes=["done", "exit"])
        self.dreamerInterface = dreamerInterface

        TIME_REACH = 5.0
        TIME_WAVE = 5.0

        # ==============================================================================================
        # Define the HandShake trajectory
        self.trajReach = Trajectory.Trajectory("Reach", TIME_REACH)
        self.trajReach.setPrevTraj(prevTraj)

        self.trajReach.addRHCartWP([0.303996207471718, -0.2701030526942624, 1.0565650087543044])
        self.trajReach.addRHCartWP([0.31749277580892055, -0.32992869726982094, 1.1461401707278551])
        self.trajReach.addRHCartWP([0.30779682978191486, -0.361949330767653, 1.2197816452489496])
        self.trajReach.addRHCartWP([0.29018706331029137, -0.3679577983733542, 1.2791416394902366])
        self.trajReach.addRHCartWP([0.30434070396771357, -0.3175099914090866, 1.2476291579050283])
        self.trajReach.addRHCartWP([0.2948513283673404, -0.33299047851674124, 1.2450358759865228])

        self.trajReach.addRHOrientWP([0.42223231355270263, -0.9025357585647759, -0.08455221998171782])
        self.trajReach.addRHOrientWP([0.42223231355270263, -0.9025357585647759, -0.08455221998171782])
        self.trajReach.addRHOrientWP([0.42223231355270263, -0.9025357585647759, -0.08455221998171782])
        self.trajReach.addRHOrientWP([0.42223231355270263, -0.9025357585647759, -0.08455221998171782])
        self.trajReach.addRHOrientWP([0.42223231355270263, -0.9025357585647759, -0.08455221998171782])
        self.trajReach.addRHOrientWP([-0.9162175793808496, -0.0720303299595776, 0.39415349649522474])

        self.trajReach.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajReach.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajReach.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajReach.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajReach.addLHCartWP(DEFAULT_READY_LH_CARTPOS)

        self.trajReach.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajReach.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajReach.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajReach.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajReach.addLHOrientWP(DEFAULT_READY_LH_ORIENT)

        self.trajReach.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.08563351097841793, 0.23066120570646761, -0.06947979281920762, 1.4175894359125643, 1.8652486120196512, -0.40980007607778823, -0.059917672051620484])
        self.trajReach.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.17224064168284461, 0.2722747206579846, 0.14874620850741385, 1.5779913500788043, 1.316143235453891, -0.3723838514077692, -0.11400556089711238])
        self.trajReach.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.24304778876516747, 0.32754466293103013, 0.269421325722746, 1.714861956511922, 1.0779088831553603, -0.09511151417983284, -0.3659881660791408])
        self.trajReach.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.2857795206271691, 0.4212023178240731, 0.2895947456690314, 1.8431326146407692, 0.788901779367182, 0.33959591972132375, -0.47706068004409297])
        self.trajReach.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.24807970222901007, 0.4306513133237536, 0.07307792647192368, 1.836185453575934, 0.638165860493282, 0.7033614682068413, -0.2041316891553697])
        self.trajReach.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.20809342510132905, 0.418759496243684, 0.15052961542725324, 1.8506436388881988, 0.6506060687046002, 0.7050826135247193, -0.2060501632804207])

        self.trajHookHorns = Trajectory.Trajectory("HookHorns", TIME_WAVE)
        self.trajHookHorns.setPrevTraj(self.trajReach)

        self.trajHookHorns.addRHCartWP([0.2868881292068328, -0.31250931865079573, 1.2124015730822668])
        self.trajHookHorns.addRHCartWP([0.2773453343884247, -0.2496828012040767, 1.2155057368654114])
        self.trajHookHorns.addRHCartWP([0.2766658953890973, -0.24088039873570907, 1.210238266769635])
        self.trajHookHorns.addRHCartWP([0.2801663112038441, -0.26999082725889695, 1.2164901734483096])
        self.trajHookHorns.addRHCartWP([0.28518210143763, -0.2894883526620809, 1.209607768936799])
        self.trajHookHorns.addRHCartWP([0.2849143779404316, -0.3219168244561627, 1.2050017115439644])
        self.trajHookHorns.addRHCartWP([0.2793076861173483, -0.3632913000154979, 1.1966825028981967])
        self.trajHookHorns.addRHCartWP([0.27337408467027774, -0.38745897565382453, 1.1772654368728874])
        self.trajHookHorns.addRHCartWP([0.27527768844061823, -0.36631330013415836, 1.2022843613272516])
        self.trajHookHorns.addRHCartWP([0.28278464299792033, -0.3478235218557357, 1.2016913562988976])
        self.trajHookHorns.addRHCartWP(self.trajReach.getFinalRHCartPos())


        self.trajHookHorns.addRHOrientWP([-0.9162175793808496, -0.0720303299595776, 0.39415349649522474])
        self.trajHookHorns.addRHOrientWP([-0.9162175793808496, -0.0720303299595776, 0.39415349649522474])
        self.trajHookHorns.addRHOrientWP([-0.9162175793808496, -0.0720303299595776, 0.39415349649522474])
        self.trajHookHorns.addRHOrientWP([-0.9162175793808496, -0.0720303299595776, 0.39415349649522474])
        self.trajHookHorns.addRHOrientWP([-0.9162175793808496, -0.0720303299595776, 0.39415349649522474])
        self.trajHookHorns.addRHOrientWP([-0.9162175793808496, -0.0720303299595776, 0.39415349649522474])
        self.trajHookHorns.addRHOrientWP([-0.9162175793808496, -0.0720303299595776, 0.39415349649522474])
        self.trajHookHorns.addRHOrientWP([-0.9162175793808496, -0.0720303299595776, 0.39415349649522474])
        self.trajHookHorns.addRHOrientWP([-0.9162175793808496, -0.0720303299595776, 0.39415349649522474])
        self.trajHookHorns.addRHOrientWP([-0.9162175793808496, -0.0720303299595776, 0.39415349649522474])
        self.trajHookHorns.addRHOrientWP(self.trajReach.getFinalRHOrient())

        self.trajHookHorns.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajHookHorns.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajHookHorns.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajHookHorns.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajHookHorns.addLHCartWP(DEFAULT_READY_LH_CARTPOS)

        self.trajHookHorns.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajHookHorns.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajHookHorns.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajHookHorns.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajHookHorns.addLHOrientWP(DEFAULT_READY_LH_ORIENT)

        self.trajHookHorns.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.12289672520864961, 0.36710252369018936, 0.10786125967776439, 1.8655120334771789, 0.5597246941406292, 0.739919098982845, -0.26467059413175575])
        self.trajHookHorns.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.1242728183388797, 0.3661074292690091, -0.10737696718121653, 1.9656809533580861, 0.2432491224911147, 0.7287232790995173, -0.2747785844253113])
        self.trajHookHorns.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.12128813501540103, 0.365822156086934, -0.14464738413872114, 1.9620185067430849, 0.09494689592511293, 0.7268826537796702, -0.2796011208704331])
        self.trajHookHorns.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.11978354191303375, 0.36410042522257047, -0.030447579730373625, 1.944115841211661, 0.4197895847301403, 0.7367403197719148, -0.27151826216433106])
        self.trajHookHorns.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.11921890686612477, 0.33092353784485873, 0.052014830357225116, 1.8968447470505743, 0.5316779970117527, 0.7378188213368994, -0.27056146645004275])
        self.trajHookHorns.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.11344040073624659, 0.31587202670329756, 0.17256950118274947, 1.8505990965519419, 0.697907173434319, 0.7405848629033178, -0.2646557445295657])
        self.trajHookHorns.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.10668532400170838, 0.3071968356314638, 0.3170745728399175, 1.7859277224922991, 0.83112599537123, 0.7403023768031077, -0.2602059448565691])
        self.trajHookHorns.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.0833422326230403, 0.3052211604407114, 0.3880526517087402, 1.7159578653629644, 0.9618448901774261, 0.7101897444014784, -0.23827068635629187])
        self.trajHookHorns.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.09871099683767812, 0.32039064915086113, 0.3280972011429039, 1.805045777393264, 0.7223384997060128, 0.7124877429724119, -0.24381749486168516])
        self.trajHookHorns.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.10929320055116498, 0.32546351502957005, 0.2526359057752484, 1.8100626973716358, 0.5187541650248289, 0.7456462526215537, -0.2723748240440218])
        self.trajHookHorns.addPostureWP(self.trajReach.getFinalPosture())

        self.trajRetract = Trajectory.Trajectory("Retract", TIME_REACH)
        self.trajRetract.setPrevTraj(self.trajReach)

        self.trajRetract.addRHCartWP([0.2948513283673404, -0.33299047851674124, 1.2450358759865228])
        self.trajRetract.addRHCartWP([0.2948513283673404, -0.33299047851674124, 1.2450358759865228])
        self.trajRetract.addRHCartWP([0.30434070396771357, -0.3175099914090866, 1.2476291579050283])
        self.trajRetract.addRHCartWP([0.29018706331029137, -0.3679577983733542, 1.2791416394902366])
        self.trajRetract.addRHCartWP([0.30779682978191486, -0.361949330767653, 1.2197816452489496])
        self.trajRetract.addRHCartWP([0.31749277580892055, -0.32992869726982094, 1.1461401707278551])
        self.trajRetract.addRHCartWP([0.303996207471718, -0.2701030526942624, 1.0565650087543044])
        self.trajRetract.addRHCartWP(DEFAULT_READY_RH_CARTPOS)

        self.trajRetract.addRHOrientWP([0.42223231355270263, -0.9025357585647759, -0.08455221998171782])
        self.trajRetract.addRHOrientWP([0.42223231355270263, -0.9025357585647759, -0.08455221998171782])
        self.trajRetract.addRHOrientWP([0.42223231355270263, -0.9025357585647759, -0.08455221998171782])
        self.trajRetract.addRHOrientWP([0.42223231355270263, -0.9025357585647759, -0.08455221998171782])
        self.trajRetract.addRHOrientWP([0.42223231355270263, -0.9025357585647759, -0.08455221998171782])
        self.trajRetract.addRHOrientWP([0.42223231355270263, -0.9025357585647759, -0.08455221998171782])
        self.trajRetract.addRHOrientWP(DEFAULT_READY_RH_ORIENT)

        self.trajRetract.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajRetract.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajRetract.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajRetract.addLHCartWP(DEFAULT_READY_LH_CARTPOS)
        self.trajRetract.addLHCartWP(DEFAULT_READY_LH_CARTPOS)

        self.trajRetract.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajRetract.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajRetract.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajRetract.addLHOrientWP(DEFAULT_READY_LH_ORIENT)
        self.trajRetract.addLHOrientWP(DEFAULT_READY_LH_ORIENT)

        self.trajRetract.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.20809342510132905, 0.418759496243684, 0.15052961542725324, 1.8506436388881988, 0.6506060687046002, 0.7050826135247193, -0.2060501632804207])
        self.trajRetract.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.24807970222901007, 0.4306513133237536, 0.07307792647192368, 1.836185453575934, 0.638165860493282, 0.7033614682068413, -0.2041316891553697])
        self.trajRetract.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.2857795206271691, 0.4212023178240731, 0.2895947456690314, 1.8431326146407692, 0.788901779367182, 0.33959591972132375, -0.47706068004409297])
        self.trajRetract.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.24304778876516747, 0.32754466293103013, 0.269421325722746, 1.714861956511922, 1.0779088831553603, -0.09511151417983284, -0.3659881660791408])
        self.trajRetract.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.17224064168284461, 0.2722747206579846, 0.14874620850741385, 1.5779913500788043, 1.316143235453891, -0.3723838514077692, -0.11400556089711238])
        self.trajRetract.addPostureWP([0.0, 0.0,
            -0.08569654146540764, 0.07021124925432169, 0,                    1.7194162945362514, 1.51, -0.07, -0.18,  # left arm
            0.08563351097841793, 0.23066120570646761, -0.06947979281920762, 1.4175894359125643, 1.8652486120196512, -0.40980007607778823, -0.059917672051620484])
        self.trajRetract.addPostureWP(DEFAULT_READY_POSTURE)

    def execute(self, userdata):
        rospy.loginfo('Executing TrajectoryHookHorns')

        if self.dreamerInterface.followTrajectory(self.trajReach):
            self.dreamerInterface.closeRightHand(includePinky = False, includeMiddle = True, includeIndex = False)
            rospy.sleep(2.0) # pause 2 seconds
            if self.dreamerInterface.followTrajectory(self.trajHookHorns):
                 rospy.sleep(2.0) # pause 2 seconds
                 self.dreamerInterface.openRightHand()
                 if self.dreamerInterface.followTrajectory(self.trajRetract):
                     return "done"
                 else:
                    return "exit"
            else:
                return "exit"
        else:
            return "exit"
class GoBackToReadyState(smach.State):
    """
    A SMACH state that makes the end effectors go back to the ready state,
    which is also the beginning of the GoToIdle trajectory.
    """

    def __init__(self, dreamerInterface, goToIdleTraj):
        """
        The constructor.

        Keyword Parameters:
          - dreamerInterface: The object to which to provide the trajectory.
          - goToIdleTraj: The goToIdle trajectory. This is used to determine the final
                          waypoint of the GoBackToReady trajectory.
        """

        smach.State.__init__(self, outcomes=["done", "exit"])
        self.dreamerInterface = dreamerInterface
        self.goToIdleTraj = goToIdleTraj

    def dist(self, point1, point2):
        return math.sqrt(math.pow(point1[0] - point2[0], 2) + \
                         math.pow(point1[1] - point2[1], 2) + \
                         math.pow(point1[2] - point2[2], 2))

    def execute(self, userdata):
        rospy.loginfo("GoBackToReadyState: Executing GoBackToReadyState")

        # Let's make the trajectory's duration a function of the Cartesian distance to traverse
        rhCurrCartPos = self.dreamerInterface.rightHandCartesianGoalMsg.data
        lhCurrCartPos = self.dreamerInterface.leftHandCartesianGoalMsg.data

        rhFinalCartPos = self.goToIdleTraj.rhCartWP[0]
        lhFinalCartPos = self.goToIdleTraj.lhCartWP[0]

        travelDist = max(self.dist(rhCurrCartPos, rhFinalCartPos), self.dist(lhCurrCartPos, lhFinalCartPos))

        if travelDist < 0.01:  # less than 1cm of movement, return done
            rospy.loginfo("GoBackToReadyState: zero travel distance, returning done")
            return "done"

        travelTime = travelDist / GO_BACK_TO_READY_SPEED
        rospy.loginfo("GoBackToReadyState: distance to travel is {0}, travel time is {1}".format(travelDist, travelTime))

        # Create a trajectory to go back to the start / idle position
        traj = Trajectory.Trajectory("GoBackToReady", travelTime)  # TODO: make the time be proportional to the distance that needs to be traveled

        # Initial goal is current goal
        traj.setInitRHCartWP(rhCurrCartPos)
        traj.setInitLHCartWP(lhCurrCartPos)
        traj.setInitRHOrientWP(self.dreamerInterface.rightHandOrientationGoalMsg.data)
        traj.setInitLHOrientWP(self.dreamerInterface.leftHandOrientationGoalMsg.data)
        traj.setInitPostureWP(self.dreamerInterface.postureGoalMsg.data)

        # repeat the same point twice (this is to ensure the trajectory has sufficient number of points to perform cubic spline)
        traj.addRHCartWP(self.dreamerInterface.rightHandCartesianGoalMsg.data)
        traj.addRHOrientWP(self.dreamerInterface.rightHandOrientationGoalMsg.data)
        traj.addLHCartWP(self.dreamerInterface.leftHandCartesianGoalMsg.data)
        traj.addLHOrientWP(self.dreamerInterface.leftHandOrientationGoalMsg.data)
        traj.addPostureWP(self.dreamerInterface.postureGoalMsg.data)

        traj.addRHCartWP(self.dreamerInterface.rightHandCartesianGoalMsg.data)
        traj.addRHOrientWP(self.dreamerInterface.rightHandOrientationGoalMsg.data)
        traj.addLHCartWP(self.dreamerInterface.leftHandCartesianGoalMsg.data)
        traj.addLHOrientWP(self.dreamerInterface.leftHandOrientationGoalMsg.data)
        traj.addPostureWP(self.dreamerInterface.postureGoalMsg.data)

        # final way point is initial waypoint of GoToIdle trajectory
        traj.addRHCartWP(rhFinalCartPos)
        traj.addRHOrientWP(self.goToIdleTraj.rhOrientWP[0])
        traj.addLHCartWP(lhFinalCartPos)
        traj.addLHOrientWP(self.goToIdleTraj.lhOrientWP[0])
        traj.addPostureWP(self.goToIdleTraj.jPosWP[0])

        # repeat the same final point (this is to ensure the trajectory has sufficient number of points to perform cubic spline)
        traj.addRHCartWP(self.goToIdleTraj.rhCartWP[0])
        traj.addRHOrientWP(self.goToIdleTraj.rhOrientWP[0])
        traj.addLHCartWP(self.goToIdleTraj.lhCartWP[0])
        traj.addLHOrientWP(self.goToIdleTraj.lhOrientWP[0])
        traj.addPostureWP(self.goToIdleTraj.jPosWP[0])

        if self.dreamerInterface.followTrajectory(traj):
            return "done"
        else:
            return "exit"


class AwaitCommandState(smach.State):
    """
    A SMACH state that waits for a command to arrive. It subscribes to a
    ROS topic over which commands are published and triggers a transition
    based on the received command.
    """

    def __init__(self, moveCartesianState, moveOrientationState, goToIdleState):
        """
        The constructor.

        Keyword parameters:
          - moveCartesianState: The SMACH state that moves the cartesian position of the end effector
          - moveOrientationState: The SMACH state that moves the orientation of the end effector
          - goToIdleState: The SMACH state that moves the robot back to the idle state
        """

        # Initialize parent class
        smach.State.__init__(self, outcomes=[
            "go_to_ready",
            "go_back_to_ready",
            "move_position",
            "move_orientation",
            "grasp_end_effector",
            "execute_hand_shake",
            "execute_wave",
            "execute_hookem_horns",
            # "execute_demo",
            "done",
            "exit"],
            output_keys=['endEffectorSide', # i.e., "left" or "right"
                         'endEffectorCmd'])  # i.e., "open" or "close"

        self.moveCartesianState = moveCartesianState
        self.moveOrientationState = moveOrientationState
        self.goToIdleState = goToIdleState

        # Initialize local variables
        self.rcvdCmd = False
        self.sleepPeriod = 0.5  # in seconds
        self.cmd = Command.CMD_GOTO_IDLE
        self.isIdle = True  # Initially we are in idle state

        # Register a ROS topic listener
        self.demoCmdSubscriber  = rospy.Subscriber("/demo9/cmd", Int32, self.demo9CmdCallback)
        self.demoDonePublisher = rospy.Publisher("/demo9/done",  Int32, queue_size=1)

        # self.demoCmdSubscriber  = rospy.Subscriber("/demo8/cmd", Int32, self.demo8CmdCallback)
        # self.demoDonePublisher = rospy.Publisher("/demo8/done",  Int32, queue_size=1)

    def demo9CmdCallback(self, msg):
        """
        The callback method of the command ROS topic subscriber.
        """

        self.cmd = msg.data
        self.rcvdCmd = True

    # def demo8CmdCallback(self, msg):
    #     """
    #     The callback method of the command ROS topic subscriber.
    #     """

    #     self.cmd = Command.CMD_EXECUTE_DEMO

    #     # TODO: Get rid of hard-coded demo IDs. CARL Bridge should send this info to us directly.
    #     DEMO_WAVE = 0
    #     DEMO_SHAKE = 1
    #     DEMO_HOOKEM_HORNS = 2

    #     if msg.data == DEMO_WAVE:
    #         self.demoName = "HandWave"
    #     elif msg.data == DEMO_SHAKE:
    #         self.demoName = "HandShake"
    #     elif msg.data == DEMO_HOOKEM_HORNS:
    #         self.demoName = "HookemHorns"
    #     else:
    #         rospy.logwarn("Unknown demo {0}".format(msg.data))
    #         return

    #     self.rcvdCmd = True

    def process1DigitCmd(self, cmd):
        if cmd == Command.CMD_GOTO_READY:

            # Only go to ready if we're in idle    TODO: eventually allow robot to return to ready from anywhere
            if self.isIdle:
                self.isIdle = False
                return "go_to_ready"
            else:
                return "done"

        elif cmd == Command.CMD_GOTO_IDLE:

            # Only go to idle if we're not in idle
            if not self.isIdle:
                self.isIdle = True
                return "go_back_to_ready"
            else:
                return "done"

        elif cmd == Command.CMD_BEHAVIOR_SHAKE:
            return "execute_hand_shake"

        elif cmd == Command.CMD_BEHAVIOR_WAVE:
            return "execute_wave"

        elif cmd == Command.CMD_BEHAVIOR_HOOKEM:
            return "execute_hookem_horns"

        elif cmd == Command.CMD_BEHAVIOR_MORE:
            return "execute_demo"

    def process2DigitCmd(self, cmd):
        digit1 = int(cmd / 10)
        digit2 = int(cmd - digit1 * 10)

        print "Two digit command:\n"\
              "  - digit1 = {0}\n"\
              "  - digit2 = {1}".format(digit1, digit2)

        if digit1 == CMD_LEFT_GRIPPER:
            userdata.endEffectorSide = "left"
            if digit2 == CMD_OPEN:
                userData.endEffectorCmd = "open"
            else:
                userData.endEffectorCmd = "close"
        elif digit1 == CMD_RIGHT_HAND:
            userdata.endEffectorSide = "right"
            if digit2 == CMD_OPEN:
                userData.endEffectorCmd = "open"
            else:
                userData.endEffectorCmd = "close"
        else:
            rospy.logerr("Invalid digit 1 of command {0}.".format(cmd))
            return "done"
        return "grasp_end_effector"

    def process3DigitCmd(self, cmd):
        digit1 = int(cmd / 100)
        digit2 = int((cmd - digit1 * 100) / 10)
        digit3 = int(cmd - digit1 * 100 - digit2 * 10)

        print "Three digit command:\n"\
              "  - digit1 = {0}\n"\
              "  - digit2 = {1}\n"\
              "  - digit3 = {2}".format(digit1, digit2, digit3)

        if digit2 == Command.CMD_LEFT_GRIPPER:
            endEffector = "left"
        elif digit2 == Command.CMD_RIGHT_HAND:
            endEffector = "right"
        else:
            rospy.logerr("Invalid second digit of command {0}.".format(cmd))
            return "done"

        if digit3 == Command.CMD_MOVE_LEFT:
            direction = CartesianDirection.LEFT
        elif digit3 == Command.CMD_MOVE_RIGHT:
            direction = CartesianDirection.RIGHT
        elif digit3 == Command.CMD_MOVE_UP:
            direction = CartesianDirection.UP
        elif digit3 == Command.CMD_MOVE_DOWN:
            direction = CartesianDirection.DOWN
        elif digit3 == Command.CMD_MOVE_FORWARD:
            direction = CartesianDirection.FORWARD
        elif digit3 == Command.CMD_MOVE_BACKWARD:
            direction = CartesianDirection.BACKWARD
        else:
            rospy.logerr("Invalid third digit of command {0}.".format(cmd))
            return "done"

        if digit1 == Command.CMD_TRANSLATE:
            self.moveCartesianState.setParameters(endEffector = endEffector, direction = direction)
            return "move_position"
        elif digit1 == Command.CMD_ROTATE:
            self.moveOrientationState.setParameters(endEffector = endEffector, direction = direction)
            return "move_orientation"
        else:
            rospy.logerr("Invalid first digit of command {0}.".format(cmd))
            return "done"

    def execute(self, userdata):
        """
        Waits for a command to arrive. Then processes the command.
        """

        rospy.loginfo('AwaitCommandState: Executing...')

        # Wait for a command to be received. Ingore all commands sent prior to now.

        self.rcvdCmd = False

        while not self.rcvdCmd and not rospy.is_shutdown():
            rospy.sleep(self.sleepPeriod)

        # Parse the command received
        if rospy.is_shutdown():
            return "exit"
        else:
            # Process single digit commands
            if self.cmd < 10:
                return self.process1DigitCmd(self.cmd)

            # Process 2 digit commands
            elif self.cmd > 9 and self.cmd < 100:
                return self.process2DigitCmd(self.cmd)

            # Process 3 digit commands
            elif self.cmd > 99 and self.cmd < 1000:
                return self.process3DigitCmd(self.cmd)

class MoveCartesianState(smach.State):
    """
    A SMACH state that moves the Cartesian position of a point on the robot.
    """

    def __init__(self, dreamerInterface):
        """
        The constructor.

        Keyword Parameters:
          - dreamerInterface: The object providing access to Dreamer hardware.
        """

        smach.State.__init__(self, outcomes=["done", "exit"])
        self.dreamerInterface = dreamerInterface
        self.trajGen = TrapezoidVelocityTrajGen.TrapezoidVelocityTrajGen()

    def setParameters(self, endEffector, direction):
        """
        Sets the end effector and movement direction parameters.

        Keyword Parameters:
          - dreamerInterface: The object providing access to Dreamer hardware.
          - endEffector: Which end effector to adjust.
          - direction: The direction to adjust the end effector's Cartesian position.
        """

        self.endEffector = endEffector
        self.direction = direction

    def directionToString(self, direction):
        """
        Returns a string representation of the direction command.

        Keyword Parameters:
          - direction: the direction to convert into a string.
        """

        if direction == CartesianDirection.UP:
            return "UP"
        elif direction == CartesianDirection.DOWN:
            return "DOWN"
        elif direction == CartesianDirection.LEFT:
            return "LEFT"
        elif direction == CartesianDirection.RIGHT:
            return "RIGHT"
        elif direction == CartesianDirection.FORWARD:
            return "FORWARD"
        elif direction == CartesianDirection.BACKWARD:
            return "BACKWARD"
        else:
            return "UNKNOWN"

    def axisNameToString(self, axisID):
        if axisID == 0:
            return "X"
        if axisID == 1:
            return "Y"
        if axisID == 2:
            return "Z"

    def execute(self, userdata):
        rospy.loginfo('MoveCartesianState: Executing, end effector = {0}, direction = {1}'.format(
            self.endEffector, self.directionToString(self.direction)))

        # Determine the current Cartesian position
        if self.endEffector == "right":
            self.origCartesianPosition = self.dreamerInterface.rightHandCartesianGoalMsg.data
        else:
            self.origCartesianPosition = self.dreamerInterface.leftHandCartesianGoalMsg.data

        if self.origCartesianPosition == None:
            rospy.loginfo("MoveCartesianState: ERROR: Unable to get current Cartesian position. Aborting the move. Returning done.")
            return "done"

        # Compute new Cartesian position

        if self.direction == CartesianDirection.FORWARD:
            oldPos = self.origCartesianPosition[X_AXIS]
            newPos = self.origCartesianPosition[X_AXIS] + CARTESIAN_MOVE_DELTA
            self.axisOfMovement = X_AXIS

        if self.direction == CartesianDirection.BACKWARD:
            oldPos = self.origCartesianPosition[X_AXIS]
            newPos = self.origCartesianPosition[X_AXIS] - CARTESIAN_MOVE_DELTA
            self.axisOfMovement = X_AXIS

        if self.direction == CartesianDirection.LEFT:
            oldPos = self.origCartesianPosition[Y_AXIS]
            newPos = self.origCartesianPosition[Y_AXIS] + CARTESIAN_MOVE_DELTA
            self.axisOfMovement = Y_AXIS

        if self.direction == CartesianDirection.RIGHT:
            oldPos = self.origCartesianPosition[Y_AXIS]
            newPos = self.origCartesianPosition[Y_AXIS] - CARTESIAN_MOVE_DELTA
            self.axisOfMovement = Y_AXIS

        if self.direction == CartesianDirection.UP:
            oldPos = self.origCartesianPosition[Z_AXIS]
            newPos = self.origCartesianPosition[Z_AXIS] + CARTESIAN_MOVE_DELTA
            self.axisOfMovement = Z_AXIS

        if self.direction == CartesianDirection.DOWN:
            oldPos = self.origCartesianPosition[Z_AXIS]
            newPos = self.origCartesianPosition[Z_AXIS] - CARTESIAN_MOVE_DELTA
            self.axisOfMovement = Z_AXIS

        rospy.loginfo("MoveCartesianState: Modifying goal Cartesian position of {0} axis to be from {1} to {2}".format(
            self.axisNameToString(self.axisOfMovement), oldPos, newPos))

        # Initialize the trajectory generator
        self.trajGen.init(oldPos, newPos, TRAVEL_SPEED, ACCELERATION, DECELERATION,
            TRAJECTORY_UPDATE_FREQUENCY)

        # Start the trajectory! The callback method is updateTrajGoals(...), which is defined below.
        self.trajGen.start(self)

        # Wait 2 seconds to allow convergence before returning
        # rospy.sleep(2)

        if rospy.is_shutdown():
             return "exit"
        else:
            return "done"

    def updateTrajGoals(self, goalPos, goalVel, done):

        # Initialize the new Cartesian position to be the original Cartesian position
        newCartesianPosition = self.origCartesianPosition

        # Save the new goal Cartesian position
        if self.axisOfMovement == X_AXIS:
            newCartesianPosition[X_AXIS] = goalPos
        elif self.axisOfMovement == Y_AXIS:
            newCartesianPosition[Y_AXIS] = goalPos
        else:
            newCartesianPosition[Z_AXIS] = goalPos

        # rospy.loginfo("MoveCartesianState: Updating goal of {0} and to be {1}.".format(
        #     self.endEffector, newCartesianPosition))

        if self.endEffector == "right":
            self.dreamerInterface.updateRightHandPosition(newCartesianPosition)
        else:
            self.dreamerInterface.updateLeftHandPosition(newCartesianPosition)

class MoveOrientationState(smach.State):
    """
    A SMACH state that moves the orientation of the robot's end effector.
    """

    def __init__(self, dreamerInterface):
        """
        The constructor.

        Keyword Parameters:
          - dreamerInterface: The object providing access to Dreamer hardware.
        """

        smach.State.__init__(self, outcomes=["done", "exit"])
        self.dreamerInterface = dreamerInterface
        self.trajGen = TrapezoidVelocityTrajGen.TrapezoidVelocityTrajGen()

    def setParameters(self, endEffector, direction):
        """
        Sets the end effector and movement direction parameters.

        Keyword Parameters:
          - dreamerInterface: The object providing access to Dreamer hardware.
          - endEffector: Which end effector to adjust.
          - direction: The direction to adjust the end effector's Cartesian position.
        """

        self.endEffector = endEffector
        self.direction = direction

    def directionToString(self, direction):
        """
        Returns a string representation of the direction command.

        Keyword Parameters:
          - direction: the direction to convert into a string.
        """

        if direction == CartesianDirection.UP:
            return "Pitch UP"
        elif direction == CartesianDirection.DOWN:
            return "Pitch DOWN"
        elif direction == CartesianDirection.LEFT:
            return "Roll LEFT"
        elif direction == CartesianDirection.RIGHT:
            return "Roll RIGHT"
        elif direction == CartesianDirection.FORWARD:
            return "Yaw Left"
        elif direction == CartesianDirection.BACKWARD:
            return "Yaw Right"
        else:
            return "UNKNOWN"

    # def axisNameToString(self, axisID):
    #     if axisID == 0:
    #         return "X"
    #     if axisID == 1:
    #         return "Y"
    #     if axisID == 2:
    #         return "Z"

    def execute(self, userdata):
        rospy.loginfo('MoveOrientationState: Executing, end effector = {0}, direction = {1}'.format(
            self.endEffector, self.directionToString(self.direction)))

        # Determine the current orientation
        if self.endEffector == "right":
            self.origOrientation = self.dreamerInterface.rightHandOrientationGoalMsg.data
        else:
            self.origOrientation = self.dreamerInterface.leftHandOrientationGoalMsg.data

        if self.origOrientation == None:
            rospy.loginfo("MoveOrientationState: ERROR: Unable to get current orientation. "\
                          "Aborting the move. Returning done.")
            return "done"

        # Compute new orientation

        rospy.loginfo("TODO: Implement orientation movements.")

        # if self.direction == CartesianDirection.FORWARD:
        #     oldPos = self.origOrientation[X_AXIS]
        #     newPos = self.origOrientation[X_AXIS] + CARTESIAN_MOVE_DELTA
        #     self.axisOfMovement = X_AXIS

        # if self.direction == CartesianDirection.BACKWARD:
        #     oldPos = self.origOrientation[X_AXIS]
        #     newPos = self.origOrientation[X_AXIS] - CARTESIAN_MOVE_DELTA
        #     self.axisOfMovement = X_AXIS

        # if self.direction == CartesianDirection.LEFT:
        #     oldPos = self.origOrientation[Y_AXIS]
        #     newPos = self.origOrientation[Y_AXIS] + CARTESIAN_MOVE_DELTA
        #     self.axisOfMovement = Y_AXIS

        # if self.direction == CartesianDirection.RIGHT:
        #     oldPos = self.origOrientation[Y_AXIS]
        #     newPos = self.origOrientation[Y_AXIS] - CARTESIAN_MOVE_DELTA
        #     self.axisOfMovement = Y_AXIS

        # if self.direction == CartesianDirection.UP:
        #     oldPos = self.origOrientation[Z_AXIS]
        #     newPos = self.origOrientation[Z_AXIS] + CARTESIAN_MOVE_DELTA
        #     self.axisOfMovement = Z_AXIS

        # if self.direction == CartesianDirection.DOWN:
        #     oldPos = self.origOrientation[Z_AXIS]
        #     newPos = self.origOrientation[Z_AXIS] - CARTESIAN_MOVE_DELTA
        #     self.axisOfMovement = Z_AXIS

        # rospy.loginfo("MoveOrientationState: Modifying goal orientation of {0} axis to be from {1} to {2}".format(
        #     self.axisNameToString(self.axisOfMovement), oldPos, newPos))

        # # Initialize the trajectory generator
        # self.trajGen.init(oldPos, newPos, TRAVEL_SPEED, ACCELERATION, DECELERATION,
        #     TRAJECTORY_UPDATE_FREQUENCY)

        # # Start the trajectory! The callback method is updateTrajGoals(...), which is defined below.
        # self.trajGen.start(self)

        # Wait 2 seconds to allow convergence before returning
        # rospy.sleep(2)

        if rospy.is_shutdown():
             return "exit"
        else:
            return "done"

    def updateTrajGoals(self, goalPos, goalVel, done):

        # TODO

        # Initialize the new Cartesian position to be the original Cartesian position
        newOrientation = self.origOrientation

        # # Save the new goal Cartesian position
        # if self.axisOfMovement == X_AXIS:
        #     newOrientation[X_AXIS] = goalPos
        # elif self.axisOfMovement == Y_AXIS:
        #     newOrientation[Y_AXIS] = goalPos
        # else:
        #     newOrientation[Z_AXIS] = goalPos

        # rospy.loginfo("MoveCartesianState: Updating goal of {0} and to be {1}.".format(
        #     self.endEffector, newOrientation))

        if self.endEffector == "right":
            self.dreamerInterface.updateRightHandOrientation(newOrientation)
        else:
            self.dreamerInterface.updateLeftHandOrientation(newOrientation)

class EndEffectorState(smach.State):
    """
    A SMACH state that toggles the state of an end effector.
    """

    def __init__(self, dreamerInterface):
        """
        The constructor.

        Keyword Parameters:
          - dreamerInterface: The object to which to provide the trajectory.
        """

        smach.State.__init__(self, outcomes=["done", "exit"], input_keys=['endEffectorSide'])
        self.dreamerInterface = dreamerInterface
        self.isClosed = False  # Assume initial state is relaxed

    def execute(self, userdata):
        rospy.loginfo('Executing EndEffectorState, side = {0}'.format(userdata.endEffectorSide))

        if userdata.endEffectorSide == "right":
            if self.isClosed:
                self.dreamerInterface.openRightHand()
            else:
                self.dreamerInterface.closeRightHand()
        else:
            if self.isClosed:
                self.dreamerInterface.openLeftGripper()
            else:
                self.dreamerInterface.closeLeftGripper()

        self.isClosed = not self.isClosed

        # wait 2 seconds to allow convergence before returning
        rospy.sleep(2)

        if rospy.is_shutdown():
             return "exit"
        else:
            return "done"

class SleepState(smach.State):
    """
    Makes the robot pause for a specified amount of time.
    """

    def __init__(self, goodResult, period):
        smach.State.__init__(self, outcomes=[goodResult, "exit"])
        self.goodResult = goodResult
        self.period = period

    def execute(self, userdata):
        rospy.loginfo("Executing SleepState")
        rospy.sleep(self.period)

        if rospy.is_shutdown():
            return "exit"
        else:
            return self.goodResult

# class ExecuteDemoState(smach.State):
#     """
#     Executes a demo.
#     """

#     def __init__(self, dreamerInterface):
#         smach.State.__init__(self, outcomes=["done", "exit"], input_keys=['demoName'])

#         # Instantiate the previous demos
#         self.handWaveDemo = Demo4_HandWave.Demo4_HandWave(dreamerInterface)
#         self.handShakeDemo = Demo5_HandShake.Demo5_HandShake(dreamerInterface)
#         self.hookemHornsDemo = Demo7_HookemHorns.Demo7_HookemHorns(dreamerInterface)

#     def execute(self, userdata):
#         rospy.loginfo('Executing demo {0}'.format(userdata.demoName))

#         if userdata.demoName == "HandWave":
#             print "Starting the Hand Wave Demo!"
#             self.handWaveDemo.run(enablePrompts = False)
#         elif userdata.demoName == "HandShake":
#             print "Starting the Hand Shake Demo!"
#             self.handShakeDemo.run(enablePrompts = False)
#         elif userdata.demoName == "HookemHorns":
#             print "Starting the Hook'em Horns Demo!"
#             self.hookemHornsDemo.run(enablePrompts = False)
#         else:
#             rospy.logwarn("Unknown demo {0}".format(userdata.demoName))

#         if rospy.is_shutdown():
#              return "exit"
#         else:
#             return "done"

class Demo9_CARL_Telemanipulation:
    """
    The primary class that implement's the demo's FSM.
    """

    def __init__(self):
        self.dreamerInterface = DreamerInterface.DreamerInterface(ENABLE_USER_PROMPTS)

    def createTrajectories(self):

        # ==============================================================================================
        # Define the GoToReady trajectory
        self.trajGoToReady = Trajectory.Trajectory("GoToReady", TIME_GO_TO_READY)

        # These are the initial values as specified in the YAML ControlIt! configuration file
        self.trajGoToReady.setInitRHCartWP([0.033912978219317776, -0.29726881641499886, 0.82])
        self.trajGoToReady.setInitLHCartWP([0.033912978219317776, 0.29726881641499886, 0.82])
        self.trajGoToReady.setInitRHOrientWP([1.0, 0.0, 0.0])
        self.trajGoToReady.setInitLHOrientWP([1.0, 0.0, 0.0])
        self.trajGoToReady.setInitPostureWP(DEFAULT_POSTURE)

        self.trajGoToReady.addRHCartWP([0.019903910090688474, -0.28423307267223147, 0.9179288590591458])
        self.trajGoToReady.addRHCartWP([-0.055152798770261954, -0.2907526623508046, 1.009663652974324])
        self.trajGoToReady.addRHCartWP([-0.03366873622218044, -0.40992725074781894, 1.1144948070701866])
        self.trajGoToReady.addRHCartWP([0.11866831717348489, -0.4101100845056917, 1.209699047600146])
        self.trajGoToReady.addRHCartWP([0.21649227857092893, -0.3006839904787592, 1.1140502834793191])
        self.trajGoToReady.addRHCartWP(DEFAULT_READY_RH_CARTPOS)

        self.trajGoToReady.addRHOrientWP([0.8950968852599132, 0.26432788250814326, 0.3590714922223199])
        self.trajGoToReady.addRHOrientWP([0.8944226954968388, 0.33098423072776184, 0.3007615015086225])
        self.trajGoToReady.addRHOrientWP([0.8994250702615956, 0.22626156457297464, 0.3739521993275524])
        self.trajGoToReady.addRHOrientWP([0.19818667912613866, -0.8161433027447201, 0.5428002851895832])
        self.trajGoToReady.addRHOrientWP([0.260956993686226, -0.8736061290033836, 0.4107478287392042])
        self.trajGoToReady.addRHOrientWP(DEFAULT_READY_RH_ORIENT)

        self.trajGoToReady.addLHCartWP([0.019903910090688474, 0.28423307267223147, 0.9179288590591458])
        self.trajGoToReady.addLHCartWP([-0.055152798770261954, 0.2907526623508046, 1.009663652974324])
        self.trajGoToReady.addLHCartWP([-0.03366873622218044, 0.40992725074781894, 1.1144948070701866])
        self.trajGoToReady.addLHCartWP([0.11866831717348489, 0.4101100845056917, 1.209699047600146])
        self.trajGoToReady.addLHCartWP([0.21649227857092893, 0.3006839904787592, 1.1140502834793191])
        self.trajGoToReady.addLHCartWP(DEFAULT_READY_LH_CARTPOS)

        self.trajGoToReady.addLHOrientWP([0.8950968852599132, -0.26432788250814326, 0.3590714922223199])
        self.trajGoToReady.addLHOrientWP([0.8944226954968388, -0.33098423072776184, 0.3007615015086225])
        self.trajGoToReady.addLHOrientWP([0.8994250702615956, -0.22626156457297464, 0.3739521993275524])
        self.trajGoToReady.addLHOrientWP([0.19818667912613866, 0.8161433027447201, 0.5428002851895832])
        self.trajGoToReady.addLHOrientWP([0.260956993686226, 0.8736061290033836, 0.4107478287392042])
        self.trajGoToReady.addLHOrientWP(DEFAULT_READY_LH_ORIENT)


        self.trajGoToReady.addPostureWP([0.06826499288341317, 0.06826499288341317,
            -0.6249282444166423,  0.3079607416653748,  -0.1220981510225299,  1.3675006234559883, 0.06394316468492173, -0.20422693251592328, 0.06223224746326836,
            -0.6249282444166423,  0.3079607416653748,  -0.1220981510225299,  1.3675006234559883, 0.06394316468492173, -0.20422693251592328, 0.06223224746326836])
        self.trajGoToReady.addPostureWP([0.0686363596318602,  0.0686363596318602,
            -1.0914342991625676,  0.39040871074764566, -0.03720209764435387, 1.7583823306095314, 0.05438773164693069, -0.20257591921666193, 0.06386553930484179,
            -1.0914342991625676,  0.39040871074764566, -0.03720209764435387, 1.7583823306095314, 0.05438773164693069, -0.20257591921666193, 0.06386553930484179])
        self.trajGoToReady.addPostureWP([0.06804075180539401, 0.06804075180539401,
            -1.3637873691001094,  0.3926057912988488,  0.575755053425441,    1.9732992187122156, 0.29999797251313004, -0.20309827518257023, 0.05586603055643467,
            -1.3637873691001094,  0.3926057912988488,  0.575755053425441,    1.9732992187122156, 0.29999797251313004, -0.20309827518257023, 0.05586603055643467])
        self.trajGoToReady.addPostureWP([0.06818415549992426, 0.06818415549992426,
            -0.8497599545494692,  0.47079074342878563, 0.8355038507753617,   2.2318590905389852, 1.8475059506175733,  -0.405570582208143,   -0.0277359315904628,
            -0.8497599545494692,  0.47079074342878563, 0.8355038507753617,   2.2318590905389852, 1.8475059506175733,  -0.405570582208143,   -0.0277359315904628])
        self.trajGoToReady.addPostureWP([0.06794500584573498, 0.06794500584573498,
            -0.24608246913199228, 0.13441397755549533, 0.2542869735593113,   2.0227000417984633, 1.3670468713459782,  -0.45978204939890815, 0.030219082955597457,
            -0.24608246913199228, 0.13441397755549533, 0.2542869735593113,   2.0227000417984633, 1.3670468713459782,  -0.45978204939890815, 0.030219082955597457])
        self.trajGoToReady.addPostureWP(DEFAULT_READY_POSTURE)

        # ==============================================================================================
        # Define the GoToIdle trajectory
        self.trajGoToIdle = Trajectory.Trajectory("GoToIdle", TIME_GO_TO_IDLE)
        self.trajGoToIdle.setPrevTraj(self.trajGoToReady)                        # This trajectory always starts where the GoToReady trajectory ends

        # 2015.01.06 Trajectory
        self.trajGoToIdle.addRHCartWP([0.25822435038901964, -0.1895604971725577, 1.0461857180093073])
        self.trajGoToIdle.addRHCartWP([0.21649227857092893, -0.3006839904787592, 1.1140502834793191])
        self.trajGoToIdle.addRHCartWP([0.11866831717348489, -0.4101100845056917, 1.209699047600146])
        self.trajGoToIdle.addRHCartWP([-0.03366873622218044, -0.40992725074781894, 1.1144948070701866])
        self.trajGoToIdle.addRHCartWP([-0.055152798770261954, -0.2907526623508046, 1.009663652974324])
        self.trajGoToIdle.addRHCartWP([0.019903910090688474, -0.28423307267223147, 0.9179288590591458])
        self.trajGoToIdle.addRHCartWP([0.033912978219317776, -0.29726881641499886, 0.82]) # Matches the start of trajectory GoToReady

        self.trajGoToIdle.addRHOrientWP([0.5409881394605172, -0.8191390472602035, 0.19063854336595773])
        self.trajGoToIdle.addRHOrientWP([0.260956993686226, -0.8736061290033836, 0.4107478287392042])
        self.trajGoToIdle.addRHOrientWP([0.19818667912613866, -0.8161433027447201, 0.5428002851895832])
        self.trajGoToIdle.addRHOrientWP([0.8994250702615956, 0.22626156457297464, 0.3739521993275524])
        self.trajGoToIdle.addRHOrientWP([0.8944226954968388, 0.33098423072776184, 0.3007615015086225])
        self.trajGoToIdle.addRHOrientWP([0.8950968852599132, 0.26432788250814326, 0.3590714922223199])
        self.trajGoToIdle.addRHOrientWP([1.0, 0.0, 0.0]) # Matches the start of trajectory GoToReady

        self.trajGoToIdle.addLHCartWP([0.25822435038901964, 0.1895604971725577, 1.0461857180093073])
        self.trajGoToIdle.addLHCartWP([0.21649227857092893, 0.3006839904787592, 1.1140502834793191])
        self.trajGoToIdle.addLHCartWP([0.11866831717348489, 0.4101100845056917, 1.209699047600146])
        self.trajGoToIdle.addLHCartWP([-0.03366873622218044, 0.40992725074781894, 1.1144948070701866])
        self.trajGoToIdle.addLHCartWP([-0.055152798770261954, 0.2907526623508046, 1.009663652974324])
        self.trajGoToIdle.addLHCartWP([0.019903910090688474, 0.28423307267223147, 0.9179288590591458])
        self.trajGoToIdle.addLHCartWP([0.033912978219317776, 0.29726881641499886, 0.82]) # Matches the start of trajectory GoToReady

        self.trajGoToIdle.addLHOrientWP([0.5409881394605172, 0.8191390472602035, 0.19063854336595773])
        self.trajGoToIdle.addLHOrientWP([0.260956993686226, 0.8736061290033836, 0.4107478287392042])
        self.trajGoToIdle.addLHOrientWP([0.19818667912613866, 0.8161433027447201, 0.5428002851895832])
        self.trajGoToIdle.addLHOrientWP([0.8994250702615956, -0.22626156457297464, 0.3739521993275524])
        self.trajGoToIdle.addLHOrientWP([0.8944226954968388, -0.33098423072776184, 0.3007615015086225])
        self.trajGoToIdle.addLHOrientWP([0.8950968852599132, -0.26432788250814326, 0.3590714922223199])
        self.trajGoToIdle.addLHOrientWP([1.0, 0.0, 0.0]) # Matches the start of trajectory GoToReady

        self.trajGoToIdle.addPostureWP([0.06796522908004803, 0.06796522908004803,                                                  # torso
                       -0.08569654146540764, 0.07021124925432169,                    0, 1.7194162945362514, 1.51, -0.07, -0.18,    # left arm
                       -0.08569654146540764, 0.07021124925432169, -0.15649686418494702, 1.7194162945362514, 1.51, -0.07, -0.18])   # right arm
        self.trajGoToIdle.addPostureWP([0.06794500584573498, 0.06794500584573498, -0.24608246913199228, 0.13441397755549533, 0.2542869735593113,   2.0227000417984633, 1.3670468713459782,  -0.45978204939890815, 0.030219082955597457, -0.24608246913199228, 0.13441397755549533, 0.2542869735593113,   2.0227000417984633, 1.3670468713459782,  -0.45978204939890815, 0.030219082955597457])
        self.trajGoToIdle.addPostureWP([0.06818415549992426, 0.06818415549992426, -0.8497599545494692,  0.47079074342878563, 0.8355038507753617,   2.2318590905389852, 1.8475059506175733,  -0.405570582208143,   -0.0277359315904628, -0.8497599545494692,  0.47079074342878563, 0.8355038507753617,   2.2318590905389852, 1.8475059506175733,  -0.405570582208143,   -0.0277359315904628])
        self.trajGoToIdle.addPostureWP([0.06804075180539401, 0.06804075180539401, -1.3637873691001094,  0.3926057912988488,  0.575755053425441,    1.9732992187122156, 0.29999797251313004, -0.20309827518257023, 0.05586603055643467, -1.3637873691001094,  0.3926057912988488,  0.575755053425441,    1.9732992187122156, 0.29999797251313004, -0.20309827518257023, 0.05586603055643467])
        self.trajGoToIdle.addPostureWP([0.0686363596318602,  0.0686363596318602,  -1.0914342991625676,  0.39040871074764566, -0.03720209764435387, 1.7583823306095314, 0.05438773164693069, -0.20257591921666193, 0.06386553930484179, -1.0914342991625676,  0.39040871074764566, -0.03720209764435387, 1.7583823306095314, 0.05438773164693069, -0.20257591921666193, 0.06386553930484179])
        self.trajGoToIdle.addPostureWP([0.06826499288341317, 0.06826499288341317, -0.6249282444166423,  0.3079607416653748,  -0.1220981510225299,  1.3675006234559883, 0.06394316468492173, -0.20422693251592328, 0.06223224746326836, -0.6249282444166423,  0.3079607416653748,  -0.1220981510225299,  1.3675006234559883, 0.06394316468492173, -0.20422693251592328, 0.06223224746326836])
        self.trajGoToIdle.addPostureWP(DEFAULT_POSTURE) # Matches the start of trajectory GoToReady

    def createFSM(self):
        # define the states
        moveCartesianState = MoveCartesianState(dreamerInterface = self.dreamerInterface)
        moveOrientationState = MoveOrientationState(dreamerInterface = self.dreamerInterface)

        goToReadyState = TrajectoryState(self.dreamerInterface, self.trajGoToReady)
        goToIdleState = TrajectoryState(self.dreamerInterface, self.trajGoToIdle)
        goBackToReadyState = GoBackToReadyState(self.dreamerInterface, self.trajGoToIdle)
        awaitCommandState = AwaitCommandState(
            moveCartesianState = moveCartesianState,
            moveOrientationState = moveOrientationState,
            goToIdleState = goToIdleState)
        # executeDemoState = ExecuteDemoState(self.dreamerInterface)
        endEffectorState = EndEffectorState(self.dreamerInterface)

        shakeHandState = TrajectoryShakeHands(self.dreamerInterface, self.trajGoToReady)
        waveState = TrajectoryWave(self.dreamerInterface, self.trajGoToReady)
        hornsState = TrajectoryHookHorns(self.dreamerInterface, self.trajGoToReady)

        # wire the states into a FSM
        self.fsm = smach.StateMachine(outcomes=['exit'])
        self.fsm.userdata.endEffectorSide = "right"
        self.fsm.userdata.demoName = "none"

        with self.fsm:

            smach.StateMachine.add("AwaitCommandState", awaitCommandState,
                transitions={"go_to_ready":"GoToReadyState",
                             "go_back_to_ready":"GoBackToReadyState",
                             "move_position":"MoveCartesianState",
                             "move_orientation":"MoveOrientationState",
                             "grasp_end_effector":"EndEffectorState",
                             # "execute_demo":"ExecuteDemoState",
                             "execute_hand_shake":"ShakeHandState",
                             "execute_wave":"WaveState",
                             "execute_hookem_horns":"HornsState",
                             "done":"AwaitCommandState",
                             "exit":"exit"},
                remapping={'endEffectorSide':'endEffectorSide'})

            smach.StateMachine.add("GoToReadyState", goToReadyState,
                transitions={'done':'AwaitCommandState',
                             'exit':'exit'})

            smach.StateMachine.add("GoToIdleState", goToIdleState,
                transitions={'done':'AwaitCommandState',
                             'exit':'exit'})

            smach.StateMachine.add("GoBackToReadyState", goBackToReadyState,
                transitions={'done':'GoToIdleState',
                             'exit':'exit'})

            smach.StateMachine.add("MoveCartesianState", moveCartesianState,
                transitions={'done':'AwaitCommandState',
                             'exit':'exit'})

            smach.StateMachine.add("MoveOrientationState", moveOrientationState,
                transitions={'done':'AwaitCommandState',
                             'exit':'exit'})

            smach.StateMachine.add("EndEffectorState", endEffectorState,
                transitions={'done':'AwaitCommandState',
                             'exit':'exit'},
                remapping={'endEffectorSide':'endEffectorSide',
                           'endEffectorCmd':'endEffectorCmd'})

            # smach.StateMachine.add("ExecuteDemoState", executeDemoState,
            #     transitions={'done':'AwaitCommandState',
            #                  'exit':'exit'},
            #     remapping={'demoName':'demoName'})

            smach.StateMachine.add("ShakeHandState", shakeHandState,
                transitions={'done':'AwaitCommandState',
                             'exit':'exit'})

            smach.StateMachine.add("WaveState", waveState,
                transitions={'done':'AwaitCommandState',
                             'exit':'exit'})

            smach.StateMachine.add("HornsState", hornsState,
                transitions={'done':'AwaitCommandState',
                             'exit':'exit'})
    def run(self):
        """
        Runs the Cartesian and orientation demo 9 behavior.
        """

        if not self.dreamerInterface.connectToControlIt(DEFAULT_POSTURE):
            return

        self.createTrajectories()
        self.createFSM()

        # Create and start the introspection server
        sis = smach_ros.IntrospectionServer('server_name', self.fsm, '/SM_ROOT')
        sis.start()

        if ENABLE_USER_PROMPTS:
            index = raw_input("Start demo? Y/n\n")
            if index == "N" or index == "n":
                return

        outcome = self.fsm.execute()

        print "Demo 9 done, waiting until ctrl+c is hit..."
        rospy.spin()  # just to prevent this node from exiting
        sis.stop()


# Main method
if __name__ == "__main__":
    rospy.init_node('Demo9_CARL_Telemanipulation', anonymous=True)
    demo = Demo9_CARL_Telemanipulation()
    demo.run()

    print "Demo 9 done, waiting until ctrl+c is hit..."
    rospy.spin()  # just to prevent this node from exiting
